from mindstorms import MSHub, Motor, MotorPair, ColorSensor, DistanceSensor, App
from mindstorms.control import wait_for_seconds, wait_until, Timer
from mindstorms.operator import greater_than, greater_than_or_equal_to, less_than, less_than_or_equal_to, equal_to, \
    not_equal_to
import math
import random
import time

# Create your objects here.
hub = MSHub()
arm1 = Motor('E')# Bottom arm
arm1.set_stop_action('hold')
arm1.set_default_speed(50)
arm2 = Motor('D')# Seccond Arm
arm2.set_stop_action('hold')
arm2.set_default_speed(50)
ball = Motor('B')
ball.set_default_speed(25)
colour = ColorSensor('A')
colourArm = Motor('C')
colourArm.set_default_speed(50)

def scanBoard():
    scan = []
    c1 = [73, 72, 73, 148, 137, 112, 13, 163, 142]
    c2 = [97, 78, 51, 347, 338, 2, 217, 317, 320]

    for i in range(9):
        arm1.run_to_position(c1[i], 'shortest path', 5)
        arm2.run_to_position(c2[i], 'shortest path', 5)
        scan.append(colour.get_color())
    return scan

# Chords Light: (arm1, arm2)
# ================================== |
# (113, 52) | (148, 347) | (013, 217)
# ---------------------------------- |
# (72, 78) | (137, 338) | (163, 317)
# ---------------------------------- |
# (73, 51) | (112, 002) | (142, 320)
# ================================== | The hub

# Chords Drop: (arm1, arm2)
# | ==================================== |
# | (140, 24)  |  (117, 26) |  (96, 41)  |
# | ------------------------------------ |
# | (163, 352) | (153, 339) | (125, 354) |
# | ------------------------------------ |
# | (192, 51)  | (167, 320) | (138, 308) |
# | ==================================== | The hub


# initialize variables
board = [None] * 9
game = True


# Tic Tac Toe Functions
def isBoardFull(board):
    if board.count(' ') > 1:
        return False
    else:
        return True


def selectRandom(li):
    ln = len(li)
    r = random.randrange(0, ln)
    return li[r]


def isWinner(bo, le):
    winning_combinations = [[7, 8, 9], [4, 5, 6], [1, 2, 3], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
    for combo in winning_combinations:
        if all([bo[i] == le for i in combo]):
            return True
    return False


def compMove():
    possibleMoves = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]
    move = 0

    for let in ['O', 'X']:
        for i in possibleMoves:
            boardCopy = board[:]
            boardCopy[i] = let
            if isWinner(boardCopy, let):
                move = i
                return move
    cornersOpen = []
    for i in possibleMoves:
        if i in [1, 3, 7, 9]:
            cornersOpen.append(i)

    if len(cornersOpen) > 0:
        move = selectRandom(cornersOpen)
        return move

    if 5 in possibleMoves:
        move = 5
        return move

    edgesOpen = []
    for i in possibleMoves:
        if i in [2, 4, 6, 8]:
            edgesOpen.append(i)

    if len(edgesOpen) > 0:
        move = selectRandom(edgesOpen)

    return move

def compPlaceBall(move):
    return



# Functions For Moters
def restPosition():# Go to rust position at the start of every turn
    arm2.run_to_position(351, 'shortest path', 20)
    arm1.run_to_position(230, 'shortest path', 20)


def moveLightDown():# Moves the light down so it can see the board
    colourArm.run_to_position(99)


def moveLightUp():# Moves the light up, allowing for the balls to fall down into the correct position
    colourArm.run_to_position(179)


def checkBoard():
    return


def dropBall(n):
    c1 = [140, 117, 96, 163, 153, 125, 164, 167, 138]
    c2 = [24, 26, 41, 352, 339, 354, 3, 320, 308]
    arm1.run_to_position(c1[n])
    arm2.run_to_position(c2[n])
    moveLightDown()
    ball.run_for_degrees(180)
    time.sleep(1)
    moveLightUp()
    ball.run_for_degrees(180)


# Game
def gameLoop():
    hub.light_matrix.write('Welcome to Tic Tac Toe!')
    while not (isBoardFull(board)):
        if not (isWinner(board, 'O')):
            return
            #playerMove()
                #scan board function, compare it to the global board, and note down the diffrences 

        else:
            hub.speaker.play_sound('Failure Chime')
            hub.light_matrix.write('You Lost! Sorry! You Lost!')
            break

            if not (isWinner(board, 'X')):
                move = compMove()
                if move == 0:
                    break
                else:
                    #insertLetter('O', move) now = compPlaceBall(move)
                    hub.speaker.play_sound('Activate')
                    hub.light_matrix.write('Computer placed an \'O\' in position', move, ':')
            else:
                hub.speaker.play_sound('Celebrate')
                hub.light_matrix.write('You Won! Congratulations! You Won!')
                break

    hub.speaker.play_sound('oh No')
    hub.light_matrix.write('Tie. Game Over. Tie.')


# Main
def main():
    game = True
    while(game):
        gameLoop()
        hub.light_matrix.write('Play again hit left button, to quite hit the right button')
        if hub.right_button.is_pressed():
            game = False 
        elif hub.left_button.is_pressed():
            #Scan the board
            # Create a function to see if all the positions in the board are empty
            # if they are write "Place your first move"
            # If not write "Please make sure you have reset the game properlu"
            
            continue
        
  
hub.speaker.beep()

dropBall(1)
restPosition()

#print(scanBoard())
#moveBalls()
#moveLightDown()
#if colour.get_color() == 'cyan' or colour.get_color() == 'white' or colour.get_color() == 'yellow':
#print(arm1.get_position())
#print(arm2.get_position())
#else:
#    print('Please Try Again')

#moveLightUp()

hub.speaker.beep()


# if can't see the players move: hub.speaker.play_sound('Error')


